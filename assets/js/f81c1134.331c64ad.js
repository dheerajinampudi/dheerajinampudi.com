"use strict";(self.webpackChunkmy_portfolio=self.webpackChunkmy_portfolio||[]).push([[130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"ai-tuning","metadata":{"permalink":"/blog/ai-tuning","source":"@site/blog/Stages_of_AI_tuning.md","title":"Stages of AI Tuning","description":"The world of AI customization involves a spectrum of approaches ranging from zero-cost prompt engineering to fully-fledged pre-training of large language models (LLMs) from scratch. Each stage offers varying levels of complexity, data requirements, and organizational investment. Understanding these stages can help you choose the right approach for your specific business or research needs.","date":"2024-12-07T00:00:00.000Z","tags":[],"readingTime":2.735,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"ai-tuning","title":"Stages of AI Tuning","date":"2024-12-07T00:00:00.000Z"},"unlisted":false,"nextItem":{"title":"RAG in Trading","permalink":"/blog/rag-in-trading"}},"content":"The world of AI customization involves a spectrum of approaches ranging from zero-cost prompt engineering to fully-fledged pre-training of large language models (LLMs) from scratch. Each stage offers varying levels of complexity, data requirements, and organizational investment. Understanding these stages can help you choose the right approach for your specific business or research needs.\\n\\n## Overview of the Stages\\n\\nThe main strategies for tuning or customizing an AI model include:\\n\\n1. **Prompt Engineering**  \\n   At the simplest end of the spectrum lies **prompt engineering**. Instead of altering the model\u2019s parameters, you craft carefully worded prompts to guide the model\u2019s outputs. This approach requires no additional data or lengthy training sessions. It\u2019s quick, cost-effective, and provides immediate improvements, but offers less fine-grained control.\\n\\n2. **Retrieval Augmented Generation (RAG)**  \\n   **RAG** introduces external knowledge sources\u2014such as a vector database or an up-to-date knowledge base\u2014into the model\u2019s responses. By retrieving relevant information at query time, the model can deliver more accurate and contextually rich answers without retraining. While it increases complexity and inference costs, RAG remains a powerful method to dynamically update the model\u2019s \u201cknowledge\u201d on the fly.\\n\\n3. **Fine-Tuning**  \\n   For organizations seeking more specialized control, **fine-tuning** is the next level. By training a pre-existing LLM on your domain-specific data, you can refine its behavior and outputs. Although it requires labeled data, computational resources, and a more extended training period than prompt engineering or RAG, fine-tuning grants granular control over the model\u2019s performance and can significantly improve domain-specific accuracy.\\n\\n4. **Pre-Training**  \\n   At the most resource-intensive end of the spectrum is **pre-training** an LLM from scratch on massive datasets. This approach provides maximum control and a tailor-made model architecture perfectly aligned with your unique needs. However, it demands significant time (often weeks or months), computational power, and large-scale curated data. It\u2019s typically pursued by large organizations or research teams aiming for pioneering innovations.\\n\\n## Visualizing the Spectrum\\n\\n![Stages of AI Tuning](model_tuning.png)\\n\\nfor a visual illustration of these stages plotted against factors like **Time/Complexity** and **Response Quality/Organizational Maturity**. As you move from **Prompt Engineering** to **RAG**, and then on to **Fine-Tuning**, and finally **Pre-Training**, both the resource investment and level of achievable specificity increase.\\n\\n## Detailed Comparison\\n\\n| ![Tuning Definitions](4_steps_AI.jpg)\\n|:--:|\\n| *Sourced from Databricks blog*|\\n\\nprovides a detailed table of these methods, highlighting key attributes such as:\\n\\n- **Data Requirements:**  \\n  - Prompt Engineering: None  \\n  - RAG: External knowledge base  \\n  - Fine-Tuning: Thousands of domain-specific samples  \\n  - Pre-Training: Billions to trillions of tokens\\n\\n- **Training Time:**  \\n  - Prompt Engineering: None  \\n  - RAG: Moderate (e.g., computing embeddings)  \\n  - Fine-Tuning: Moderate to long (depending on dataset size)  \\n  - Pre-Training: Long (days to many weeks)\\n\\n- **Advantages and Considerations:**  \\n  - Prompt Engineering: Fast and cost-effective, but limited control.  \\n  - RAG: Dynamically updated context, but longer prompts and increased inference costs.  \\n  - Fine-Tuning: Granular domain specialization, but requires labeled data and more compute.  \\n  - Pre-Training: Maximum control and tailor-fit, but extremely resource-intensive.\\n\\n## Choosing the Right Approach\\n\\nSelecting the right stage of AI tuning depends on your organization\u2019s goals, resources, and maturity level:\\n\\n- **Immediate Results, No Additional Data:** Prompt Engineering  \\n- **Dynamic Knowledge Integration:** Retrieval Augmentation  \\n- **Specific Domain Expertise:** Fine-Tuning  \\n- **Full Control & Customization:** Pre-Training\\n\\nBy understanding each stage\u2019s trade-offs, you can strategically invest in the approach that best aligns with your constraints and aspirations."},{"id":"rag-in-trading","metadata":{"permalink":"/blog/rag-in-trading","source":"@site/blog/RAG-in-Trading.md","title":"RAG in Trading","description":"Using Retrieval-Augmented Generation (RAG) in trading involves integrating live data, such as news, economic indicators, AI Agents and with advanced AI models to make informed trading decisions.","date":"2024-07-05T00:00:00.000Z","tags":[],"readingTime":3.38,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"rag-in-trading","title":"RAG in Trading","date":"2024-07-05T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"Stages of AI Tuning","permalink":"/blog/ai-tuning"},"nextItem":{"title":"Mental Models","permalink":"/blog/mental-models"}},"content":"Using Retrieval-Augmented Generation (RAG) in trading involves integrating live data, such as news, economic indicators, AI Agents and with advanced AI models to make informed trading decisions.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Components Required\\n\\n1. **Live Data Feeds:**\\n   - **News APIs:** Use APIs like NewsAPI, Alpha Vantage News, or any specific financial news provider to get real-time news updates.\\n   - **Stock Market APIs:** Use APIs like Alpha Vantage, IEX Cloud, or Yahoo Finance to get live stock prices and other financial metrics.\\n\\n2. **Trading Platform APIs:**\\n   - **Brokerage APIs:** Integrate with brokerage APIs like Alpaca, Interactive Brokers, or Robinhood to execute buy/sell orders programmatically.\\n\\n3. **RAG Model:**\\n   - **Retrieval Component:** Use Elasticsearch or another retrieval system to index and retrieve relevant news articles and financial data based on queries.\\n   - **Generation Component:** Use a transformer-based model like GPT-3 or a custom fine-tuned model to analyze the retrieved information and generate insights or trading signals.\\n\\n4. **Trading Algorithms:**\\n   - Develop or use existing trading algorithms that can process the insights generated by the RAG model to make buy/sell decisions.\\n\\n### Workflow\\n\\n1. **Data Retrieval:**\\n   - Set up a pipeline to continuously fetch live news articles and stock prices using the respective APIs.\\n   - Index the news articles and other relevant data using a retrieval system like Elasticsearch.\\n\\n2. **Query Generation:**\\n   - Create a query generator that formulates relevant queries based on the current stock market context. For example, the query could be \\"impact of current events on tech stocks.\\"\\n\\n3. **Retrieval Process:**\\n   - Use the retrieval component to fetch relevant news articles and data based on the generated queries.\\n\\n4. **Generation of Insights:**\\n   - Use the generation component of the RAG model to analyze the retrieved information and generate trading insights. For example, the model could summarize how recent news might affect certain stocks.\\n\\n5. **Trading Algorithm Integration:**\\n   - Integrate the insights with your trading algorithms. The trading algorithm should be designed to interpret the insights and make buy/sell decisions.\\n   - For example, if the RAG model indicates positive sentiment around a stock, the trading algorithm might decide to buy that stock.\\n\\n6. **Execution of Trades:**\\n   - Use the brokerage API to execute the trades based on the decisions made by the trading algorithm.\\n\\n### Example Implementation\\n\\n```python\\nimport requests\\nfrom elasticsearch import Elasticsearch\\nimport openai\\n\\n# Configure APIs and Elasticsearch\\nnews_api_url = \\"https://newsapi.org/v2/everything\\"\\nstock_api_url = \\"https://www.alphavantage.co/query\\"\\nbroker_api_url = \\"https://broker-api.example.com/trade\\"\\nes = Elasticsearch(\\"http://localhost:9200\\")\\n\\n# Fetch live news and stock prices\\ndef fetch_news(api_key, query):\\n    response = requests.get(news_api_url, params={\\"q\\": query, \\"apiKey\\": api_key})\\n    return response.json()[\\"articles\\"]\\n\\ndef fetch_stock_price(api_key, symbol):\\n    response = requests.get(stock_api_url, params={\\"function\\": \\"TIME_SERIES_INTRADAY\\", \\"symbol\\": symbol, \\"interval\\": \\"1min\\", \\"apikey\\": api_key})\\n    return response.json()[\\"Time Series (1min)\\"]\\n\\n# Index news articles in Elasticsearch\\ndef index_news_articles(articles):\\n    for article in articles:\\n        es.index(index=\\"news\\", document=article)\\n\\n# Retrieve and generate insights using OpenAI\\ndef generate_insights(query):\\n    results = es.search(index=\\"news\\", query={\\"match\\": {\\"content\\": query}})\\n    context = \\" \\".join([hit[\\"_source\\"][\\"content\\"] for hit in results[\\"hits\\"][\\"hits\\"]])\\n    response = openai.Completion.create(engine=\\"text-davinci-003\\", prompt=f\\"Analyze the following news and provide trading insights: {context}\\", max_tokens=150)\\n    return response.choices[0].text.strip()\\n\\n# Execute trade\\ndef execute_trade(api_key, symbol, action, quantity):\\n    response = requests.post(broker_api_url, json={\\"symbol\\": symbol, \\"action\\": action, \\"quantity\\": quantity}, headers={\\"Authorization\\": f\\"Bearer {api_key}\\"})\\n    return response.json()\\n\\n# Main trading loop\\ndef trading_loop():\\n    news_api_key = \\"YOUR_NEWS_API_KEY\\"\\n    stock_api_key = \\"YOUR_STOCK_API_KEY\\"\\n    broker_api_key = \\"YOUR_BROKER_API_KEY\\"\\n    query = \\"impact of current events on tech stocks\\"\\n    \\n    # Fetch and index news articles\\n    articles = fetch_news(news_api_key, query)\\n    index_news_articles(articles)\\n    \\n    # Generate insights\\n    insights = generate_insights(query)\\n    print(f\\"Generated Insights: {insights}\\")\\n    \\n    # Make trading decision\\n    if \\"positive sentiment\\" in insights:\\n        execute_trade(broker_api_key, \\"AAPL\\", \\"buy\\", 10)\\n    elif \\"negative sentiment\\" in insights:\\n        execute_trade(broker_api_key, \\"AAPL\\", \\"sell\\", 10)\\n\\n# Run the trading loop\\ntrading_loop()\\n```\\n\\n### Considerations\\n\\n- **Data Latency:** Ensure that the data retrieval and processing pipeline is optimized for minimal latency to make timely trading decisions.\\n- **Model Accuracy:** Fine-tune your RAG model on financial data to improve the accuracy of generated insights.\\n- **Risk Management:** Incorporate risk management strategies in your trading algorithms to mitigate potential losses.\\n- **Regulatory Compliance:** Ensure that your trading activities comply with relevant financial regulations and laws.\\n\\nUsing RAG in trading can provide a significant edge by leveraging real-time data and advanced AI models to make informed decisions."},{"id":"mental-models","metadata":{"permalink":"/blog/mental-models","source":"@site/blog/Mental-Models.md","title":"Mental Models","description":"Mental models are powerful tools for understanding the world, making better decisions, and solving problems. Think of them as mental shortcuts or frameworks that help you navigate complexity.","date":"2024-07-01T00:00:00.000Z","tags":[],"readingTime":1.71,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"mental-models","title":"Mental Models","date":"2024-07-01T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"RAG in Trading","permalink":"/blog/rag-in-trading"}},"content":"Mental models are powerful tools for understanding the world, making better decisions, and solving problems. Think of them as mental shortcuts or frameworks that help you navigate complexity.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Must-Know Mental Models for Everyday Life\\n\\n### 1. How to Make Smart Decisions Without Getting Lucky\\n\\n* **Key Idea:** Smart decisions aren\'t based on luck. They come from understanding probabilities, risks, and potential outcomes.\\n* **Learn More:** [How to Make Smart Decisions Without Getting Lucky](https://fs.blog/smart-decisions/)\\n\\n### 2. The Feynman Learning Technique\\n\\n* **Key Idea:** Learning is not just about memorization. To truly understand something, explain it simply, identify gaps in your knowledge, and refine your understanding.\\n* **Learn More:** [The Feynman Learning Technique](https://jamesclear.com/)\\n\\n### 3. Understanding Your Circle of Competence\\n\\n* **Key Idea:** Know your strengths and limitations. Focus on areas where you have expertise and avoid overconfidence in areas where you don\'t.\\n* **Learn More:** [Understanding your Circle of Competence: Avoiding Problems](https://fs.blog/circle-of-competence/)\\n\\n## Mental Models for Making Decisions\\n\\n### 4. Mental Models: The Best Way to Make Intelligent Decisions (~100 Models Explained)\\n\\n* **Key Idea:** This comprehensive guide explores a wide range of mental models from various fields. Learn how to apply these models to improve decision-making.\\n* **Learn More:** [Mental Models: The Best Way to Make Intelligent Decisions (~100 Models Explained)](https://en.wikipedia.org/wiki/Mental_model)\\n\\n## Mental Models for Startup Founders\\n\\n### 5. Mental models for startup founders: a free book\\n\\n* **Key Idea:** This free book provides a curated collection of mental models specifically tailored for startup founders. Discover how to apply these models to navigate the challenges of entrepreneurship.\\n* **Learn More:** [Mental models for startup founders: a free book](https://guustaaf.com/naval/Naval-HowToGetRich.pdf)\\n\\n## More Resources\\n\\n* **Nav.al:** A treasure trove of insights from Naval Ravikant, a successful entrepreneur and investor. Explore his ideas on wealth, happiness, and decision-making.\\n* **Farnam Street Blog:** This blog delves into mental models, decision-making, and critical thinking skills. \\n\\n**Remember:** The best way to use mental models is to practice applying them to real-life situations. Start with a few that resonate with you and gradually expand your toolkit."}]}}')}}]);